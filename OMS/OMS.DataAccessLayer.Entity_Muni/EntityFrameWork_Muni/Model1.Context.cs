//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OMS.DataAccessLayer.Entity_Muni.EntityFrameWork_Muni
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class OMSEntities : DbContext
    {
        public OMSEntities()
            : base("name=OMSEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Category> Category { get; set; }
        public virtual DbSet<customers> customers { get; set; }
        public virtual DbSet<Employee> Employee { get; set; }
        public virtual DbSet<Inventory> Inventory { get; set; }
        public virtual DbSet<OrderItem> OrderItem { get; set; }
        public virtual DbSet<Orders> Orders { get; set; }
        public virtual DbSet<PaymentStatus> PaymentStatus { get; set; }
        public virtual DbSet<Products> Products { get; set; }
        public virtual DbSet<Returns> Returns { get; set; }
        public virtual DbSet<ReturnStatus> ReturnStatus { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<WareHouse> WareHouse { get; set; }
    
        public virtual int AddInventory(string warehouseCode, Nullable<int> productIdFk, Nullable<System.DateTime> stockDate, Nullable<int> availableQuantity, Nullable<decimal> pricePerUnit, Nullable<int> remainingQuantity)
        {
            var warehouseCodeParameter = warehouseCode != null ?
                new ObjectParameter("WarehouseCode", warehouseCode) :
                new ObjectParameter("WarehouseCode", typeof(string));
    
            var productIdFkParameter = productIdFk.HasValue ?
                new ObjectParameter("ProductIdFk", productIdFk) :
                new ObjectParameter("ProductIdFk", typeof(int));
    
            var stockDateParameter = stockDate.HasValue ?
                new ObjectParameter("StockDate", stockDate) :
                new ObjectParameter("StockDate", typeof(System.DateTime));
    
            var availableQuantityParameter = availableQuantity.HasValue ?
                new ObjectParameter("AvailableQuantity", availableQuantity) :
                new ObjectParameter("AvailableQuantity", typeof(int));
    
            var pricePerUnitParameter = pricePerUnit.HasValue ?
                new ObjectParameter("PricePerUnit", pricePerUnit) :
                new ObjectParameter("PricePerUnit", typeof(decimal));
    
            var remainingQuantityParameter = remainingQuantity.HasValue ?
                new ObjectParameter("RemainingQuantity", remainingQuantity) :
                new ObjectParameter("RemainingQuantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddInventory", warehouseCodeParameter, productIdFkParameter, stockDateParameter, availableQuantityParameter, pricePerUnitParameter, remainingQuantityParameter);
        }
    
        public virtual int AddOrder(string invoiceNumber, Nullable<int> wareHouseIdfk, string phNo, Nullable<System.DateTime> orderDate, Nullable<int> noOfItems, string paymentStatus, Nullable<decimal> totalAmount)
        {
            var invoiceNumberParameter = invoiceNumber != null ?
                new ObjectParameter("InvoiceNumber", invoiceNumber) :
                new ObjectParameter("InvoiceNumber", typeof(string));
    
            var wareHouseIdfkParameter = wareHouseIdfk.HasValue ?
                new ObjectParameter("WareHouseIdfk", wareHouseIdfk) :
                new ObjectParameter("WareHouseIdfk", typeof(int));
    
            var phNoParameter = phNo != null ?
                new ObjectParameter("PhNo", phNo) :
                new ObjectParameter("PhNo", typeof(string));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var noOfItemsParameter = noOfItems.HasValue ?
                new ObjectParameter("NoOfItems", noOfItems) :
                new ObjectParameter("NoOfItems", typeof(int));
    
            var paymentStatusParameter = paymentStatus != null ?
                new ObjectParameter("PaymentStatus", paymentStatus) :
                new ObjectParameter("PaymentStatus", typeof(string));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddOrder", invoiceNumberParameter, wareHouseIdfkParameter, phNoParameter, orderDateParameter, noOfItemsParameter, paymentStatusParameter, totalAmountParameter);
        }
    
        public virtual int AddOrderItem(string invoiceNumber, Nullable<int> wareHouseIdfk, string productCode, Nullable<int> quantity, Nullable<decimal> pricePerUnit, Nullable<decimal> totalAmount)
        {
            var invoiceNumberParameter = invoiceNumber != null ?
                new ObjectParameter("InvoiceNumber", invoiceNumber) :
                new ObjectParameter("InvoiceNumber", typeof(string));
    
            var wareHouseIdfkParameter = wareHouseIdfk.HasValue ?
                new ObjectParameter("WareHouseIdfk", wareHouseIdfk) :
                new ObjectParameter("WareHouseIdfk", typeof(int));
    
            var productCodeParameter = productCode != null ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var pricePerUnitParameter = pricePerUnit.HasValue ?
                new ObjectParameter("PricePerUnit", pricePerUnit) :
                new ObjectParameter("PricePerUnit", typeof(decimal));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddOrderItem", invoiceNumberParameter, wareHouseIdfkParameter, productCodeParameter, quantityParameter, pricePerUnitParameter, totalAmountParameter);
        }
    
        public virtual int AddReturn(string invoiceNumber, Nullable<System.DateTime> returnDate, string reason, string returnStatus, Nullable<decimal> amountRefund)
        {
            var invoiceNumberParameter = invoiceNumber != null ?
                new ObjectParameter("InvoiceNumber", invoiceNumber) :
                new ObjectParameter("InvoiceNumber", typeof(string));
    
            var returnDateParameter = returnDate.HasValue ?
                new ObjectParameter("ReturnDate", returnDate) :
                new ObjectParameter("ReturnDate", typeof(System.DateTime));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var returnStatusParameter = returnStatus != null ?
                new ObjectParameter("ReturnStatus", returnStatus) :
                new ObjectParameter("ReturnStatus", typeof(string));
    
            var amountRefundParameter = amountRefund.HasValue ?
                new ObjectParameter("AmountRefund", amountRefund) :
                new ObjectParameter("AmountRefund", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddReturn", invoiceNumberParameter, returnDateParameter, reasonParameter, returnStatusParameter, amountRefundParameter);
        }
    
        public virtual ObjectResult<GetAllProductsFromDB_Result> GetAllProductsFromDB()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllProductsFromDB_Result>("GetAllProductsFromDB");
        }
    
        public virtual ObjectResult<GetAllStockInfoOfTodayFromDB_Result> GetAllStockInfoOfTodayFromDB(Nullable<System.DateTime> stockDateStr)
        {
            var stockDateStrParameter = stockDateStr.HasValue ?
                new ObjectParameter("StockDateStr", stockDateStr) :
                new ObjectParameter("StockDateStr", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllStockInfoOfTodayFromDB_Result>("GetAllStockInfoOfTodayFromDB", stockDateStrParameter);
        }
    
        public virtual ObjectResult<GetAllWareHouseData_Result> GetAllWareHouseData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllWareHouseData_Result>("GetAllWareHouseData");
        }
    
        public virtual int InsertOrUpdateEmpData(string empCode, string empName, string empWareHouseCode, string empContactNumber, string gender, Nullable<decimal> salary)
        {
            var empCodeParameter = empCode != null ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(string));
    
            var empNameParameter = empName != null ?
                new ObjectParameter("EmpName", empName) :
                new ObjectParameter("EmpName", typeof(string));
    
            var empWareHouseCodeParameter = empWareHouseCode != null ?
                new ObjectParameter("EmpWareHouseCode", empWareHouseCode) :
                new ObjectParameter("EmpWareHouseCode", typeof(string));
    
            var empContactNumberParameter = empContactNumber != null ?
                new ObjectParameter("EmpContactNumber", empContactNumber) :
                new ObjectParameter("EmpContactNumber", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("Salary", salary) :
                new ObjectParameter("Salary", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertOrUpdateEmpData", empCodeParameter, empNameParameter, empWareHouseCodeParameter, empContactNumberParameter, genderParameter, salaryParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UpdateOrInsertCustomer(string customerName, string phNo)
        {
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var phNoParameter = phNo != null ?
                new ObjectParameter("PhNo", phNo) :
                new ObjectParameter("PhNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateOrInsertCustomer", customerNameParameter, phNoParameter);
        }
    
        public virtual int UpdateWarehousesData(string wareHouseCode, string wareHouseName, string location, string managerName, string contactNO)
        {
            var wareHouseCodeParameter = wareHouseCode != null ?
                new ObjectParameter("WareHouseCode", wareHouseCode) :
                new ObjectParameter("WareHouseCode", typeof(string));
    
            var wareHouseNameParameter = wareHouseName != null ?
                new ObjectParameter("WareHouseName", wareHouseName) :
                new ObjectParameter("WareHouseName", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var managerNameParameter = managerName != null ?
                new ObjectParameter("ManagerName", managerName) :
                new ObjectParameter("ManagerName", typeof(string));
    
            var contactNOParameter = contactNO != null ?
                new ObjectParameter("ContactNO", contactNO) :
                new ObjectParameter("ContactNO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateWarehousesData", wareHouseCodeParameter, wareHouseNameParameter, locationParameter, managerNameParameter, contactNOParameter);
        }
    }
}
